/*
 * (#)build.gradle  0.4.0   07/11/2025
 * (#)build.gradle  0.3.0   07/08/2025
 * (#)build.gradle  0.2.0   07/08/2025
 * (#)build.gradle  0.1.0   07/05/2025
 *
 * @author   Jonathan Parker
 * @version  0.4.0
 * @since    0.1.0
 *
 * MIT License
 *
 * Copyright (c) 2025 Jonathan M. Parker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * The following system property must be set in HOME/.gradle/gradle.properties:
 *   systemProp.macosArchitecture=silicon
 *
 * Pass command line arguments to the Java program as follows:
 *   gradle <JavaExec Task> --args="arg1 arg2 arg3"
 *
 */

plugins {
	id 'java'
	id 'net.jmp.gradle.plugin.projectinfo-info'	version '0.1.0'
}

apply plugin: 'net.jmp.gradle.plugin.projectinfo-info'

ext {
	chatModel = 'gpt-4.1'
	javaMainClass = 'net.jmp.speeches.Main'
	loadTimeoutInSeconds = 60
	maxTokens = 512
	mongoDbCollectionSpeeches = 'speeches'
	mongoDbCollectionVectors = 'vectors'
	mongoDbName = 'speeches'
	mongoDbUri = 'etc/mongo-db-uri.txt'
	namespace = 'speeches'
	openaiApiKey = 'etc/open-ai-api-key.txt'
	pineconeApiKey = 'etc/pinecone-api-key.txt'
	project.group = 'net.jmp.pinecone.quickstart'
	project.version = '0.4.0'
	project.description = 'to work with NLP and AI using famous presidential speeches'
	rerankingModel = 'bge-reranker-v2-m3'
	searchableEmbeddingModel = 'multilingual-e5-large'
	searchableIndexName = 'speeches'
	speechesLocation = '/Users/jonathan/Documents/Speeches'
	topK = 10
}

java.sourceCompatibility = JavaVersion.VERSION_24

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	implementation		(libs.bundles.logging)
	implementation		(libs.com.openai.openai.java)
	implementation		(libs.edu.stanford.nlp.stanford.corenlp)
	implementation		(libs.io.pinecone.pinecone.client)
	implementation		(libs.org.mongodb.mongodb.driver.sync)

	implementation		"edu.stanford.nlp:stanford-corenlp:4.5.5:models"
	implementation		"edu.stanford.nlp:stanford-corenlp:4.5.5:models-english"
	implementation		"edu.stanford.nlp:stanford-corenlp:4.5.5:models-english-kbp"

	runtimeOnly			(libs.bundles.logging.runtime)

	testRuntimeOnly		('org.junit.platform:junit-platform-launcher')
}

tasks.compileJava {
    options.forkOptions.jvmArgs = ["-Xmx8192m", "--enable-native-access=ALL-UNNAMED"]
}

tasks.withType(Javadoc).configureEach {
    CoreJavadocOptions cjo = options as CoreJavadocOptions
    StandardJavadocDocletOptions sjdo = options as StandardJavadocDocletOptions

    cjo.encoding("UTF-8")
    cjo.addStringOption("source", "24")
    cjo.memberLevel = JavadocMemberLevel.PRIVATE

    sjdo.version(true)
}

tasks.withType(JavaExec).configureEach {
	jvmArgs = ["-Xmx8192m",
			   "--enable-native-access=ALL-UNNAMED",
			   "--sun-misc-unsafe-memory-access=allow",	// Stop the JVM from complaining about Netty
			   "-ea"]

	println()
	println("JVM Arguments: " + jvmArgs)

	systemProperties(
			[
 			 'app.chatModel': chatModel,
 			 'app.loadTimeoutInSeconds': loadTimeoutInSeconds,
 			 'app.maxTokens': maxTokens,
			 'app.mongoDbCollectionSpeeches': mongoDbCollectionSpeeches,
			 'app.mongoDbCollectionVectors': mongoDbCollectionVectors,
			 'app.mongoDbName': mongoDbName,
			 'app.mongoDbUri': mongoDbUri,
			 'app.namespace': namespace,
			 'app.openaiApiKey': openaiApiKey,
			 'app.pineconeApiKey': pineconeApiKey,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': '',
			 'app.searchableEmbeddingModel': searchableEmbeddingModel,
			 'app.searchableIndexName': searchableIndexName,
			 'app.speechesLocation': speechesLocation,
			 'app.topK': topK
			]
	)

	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('create', JavaExec) {
	getSystemProperties().put('app.operation', 'create')
}

tasks.register('delete', JavaExec) {
	getSystemProperties().put('app.operation', 'delete')
}

tasks.register('load', JavaExec) {
	getSystemProperties().put('app.operation', 'load')
}

tasks.register('query', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'query')
	sysProps.put('app.operation', 'query')
	sysProps.put('app.queryText', 'What was said about the war in Vietnam?')
}

tasks.register('query-by-author-full-name', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'query-by-author-full-name')
	sysProps.put('app.operation', 'query')
	sysProps.put('app.queryText', 'What are the principles cited by Gerald R. Ford in his speeches?')
}

tasks.register('query-by-author-last-name', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'query-by-author-last-name')
	sysProps.put('app.operation', 'query')
	sysProps.put('app.queryText', 'What does Nixon have to say about communism and the Soviet Union?')
}

tasks.register('query-by-combo', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'query-by-combo')
	sysProps.put('app.operation', 'query')
	sysProps.put('app.queryText', 'What did Abraham Lincoln discuss in his second inaugural address?')
}

tasks.register('query-by-title', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'query-by-title')
	sysProps.put('app.operation', 'query')
	sysProps.put('app.queryText', 'What is the theme of the address to British Parliament?')
}

tasks.register('search', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'search')
	sysProps.put('app.operation', 'search')
	sysProps.put('app.queryText', 'What was said about the war in Vietnam?')
}

tasks.register('search-by-author-full-name', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'search-by-author-full-name')
	sysProps.put('app.operation', 'search')
	sysProps.put('app.queryText', 'What are the principles cited by Gerald R. Ford in his speeches?')
}

tasks.register('search-by-author-last-name', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'search-by-author-last-name')
	sysProps.put('app.operation', 'search')
	sysProps.put('app.queryText', 'What does Nixon have to say about communism and the Soviet Union?')
}

tasks.register('search-by-combo', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'search-by-combo')
	sysProps.put('app.operation', 'search')
	sysProps.put('app.queryText', 'What did Abraham Lincoln discuss in his second inaugural address?')
}

tasks.register('search-by-title', JavaExec) {
	var sysProps = getSystemProperties()

	sysProps.put('app.gradleTaskName', 'search-by-title')
	sysProps.put('app.operation', 'search')
	sysProps.put('app.queryText', 'What is the theme of the address to British Parliament?')
}

tasks.register('store', JavaExec) {
	getSystemProperties().put('app.operation', 'store')
}
